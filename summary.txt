关于微信点餐系统开发的总结
四章买家类目
	1、根据categoryId查找类目
	2、查找所有
	3、查找某些类目编号
	4、保存类目

五章买家商品
	1、根据id查询商品
	2、查询所有上架商品
	3、分页查询所有商品
	4、保存商品
	
	3、根据productId上架商品（需要先通过productId查找商品，如果为空，抛出相应异常，如果查出来的商品的状态已经是上架，也要抛出相应异常）
	4、根据productId下架商品（同上）
	5、商品列表API：（要按照前端定义好的json格式返回）
		（1）查询所有上架商品
		（2）一次性查询类目
		（3）数据拼装，把商品放到对应的类别下面

六章买家订单	
	1、根据productId和productQuantity增加库存（后台通过productId查找商品，如果为空，抛出相应异常）
	2、根据productId和productQuantity减少库存（后台通过productId查找商品，如果为空，抛出相应异常），还有就是减库存之后小于0也要抛出相应异常
	3、创建订单
		（1）首先要根据前端传来的订单的商品Id查询商品，检查是否在数据库存在，没有则抛出异常
		（2）计算订单总价，单价需要从数据库查，不能用前端传的
		（3）订单详情入库
		（4）订单入库
		（5）减库存
	4、根据orderId查找订单，分别根据orderId查找orderMaster和orderDetail，如果不存在则抛出异常
	5、根据buyerOpenid查找订单集合
	6、取消订单
		（1）判断订单状态，如果已经是已取消则抛出异常
		（2）修改订单状态，出错则抛出异常
		（3）返回库存，但是先判断是否有订单详情，没有则抛出异常
		（4）如果付款了，还需要退款
	7、完成订单
		（1）判断订单状态
		（2）修改订单状态
	8、支付订单
		（1）判断订单状态
		（2）判断支付状态
		（3）修改支付状态
	9、分页查询所有订单

七章微信授权
八章微信支付
九章卖家订单
十章商品列表
十一章卖家商品



3-2日志的使用
	1、什么是日志框架
		是一套能实现日志输出的工具包
		能够描述系统运行状态的所有时间都可以算作日志（用户下线，接口超市，数据库崩溃...）
	2、日志框架的能力
		定制输出目标
		定制输出格式
		携带上下文信息
		运行时选择性输出
		灵活的配置
	3、日志框架的选择
		常用的日志框架：JUL、JCL、Log4j、log4j2、Logback、Slf4j、jboss-logging
		面向接口编程：
			日志门面：JCL、SLF4J、jboss-logging
			日志实现：Log4j（被作者自己抛弃）、Log4j2（和Log4j没有关系，太先进了，开源框架对它的完善不好）、Logback、JUL
	4、logback的使用与配置
		applicaiotn.yml中配置方式比较简单
		logback-spring.xml可以进行复杂的配置。
		(看wechatsell项目的LoggerTest类和application.xml和logback-spring.xml)
		生产中一般将error和info分别每日输出
		还可以多看看源码：maven jar包中spring-boot中logging下面

4-dao层的开发
	1、引入pom文件：spring-boot-starter-data-jpa
	2、定义接口类public interface ProductCategoryRepository extends JpaRepository<ProductCategory,Integer> ，泛型参数一个是该类，一个是该类的主键，自定义方法要注意命名规范，jpa是根据命名会自动写sql的
	3、实体的名字要和表名一样，如果不一样，需要在实体类上加@Table(name = "tbname")，
		实体类上需要添加@Entity注解，把实体映射为数据表，
		添加@DynamicUpdate//动态更新 比如：做更新操作的时候，首先是获取该类，如果只更新了类型，数据库的updateTime不会更新，加了这个注解才会更新
		主键需要加@Id注解，如果是整型自增还需要添加@GeneratedValue
	4、添加依赖：lombok，可以省略getter、setter、toString()等方法
	5、Test测试方法上添加@Transactional注解表示此测试方法不会对数据库的数据有影响，完全的回滚，不管有没有异常发生
	6、dao层的测试：类上添加@RunWith(SpringRunner.class)@SpringBootTest，@Autowired自动注入该接口，直接用接口.方法Assert()测试

5-
	1、spring自带的Pageable分页接口，传参数时候可以用PageRequest request = new PageRequest(0, 2);返回Page<> list
	2、lambda表达式：List<Integer> categoryTypeList = productInfoList.stream()
                .map(e -> e.getCategoryType())
                .collect(Collectors.toList());
    3、返回给前端的json对象应该遵循需要什么，返回什么的规则，
    	在VO类定义属性的时候为了方便见名知意，可以定义为private String productId，但是如果定义了json文件，为了遵循返回给前端的名称一致;
    	，可以使用@JsonProperty("id")注解，这样返回给前端的json数据的key就是id了。
    4、BeanUtils.copyProperties(productInfo,productInfoVO);将前一个对象赋值给后面一个对象，对应属性名要一致。注意：如果前面一个为空，也会同样赋值给后面一个。

6-
    1、OrderMaster表其实没有OrderDetail这个字段，可以在字段加上@Transient注解这样实体类对应的时候回忽略这个字段，但是这样做不好，实体类应该对应数据表
    2、重要的字段一定不能由前端传，比如商品单价。
    3、一个项目应该有自定义异常类
    4、KeyUtil生成唯一主键，但是要注意多线程问题，当多个用户同时访问还是会出现不是唯一的情况，所以需要在方法上添加synchronized关键字
    （看keyUtil类）
    5、在程序的编程过程中，特别要做非空的判断。时刻考虑到代码的健壮性。
    6、注意：当两个用户同时对一个商品减库存的时候，多线程：分别查出来的数据可以减，但是同时其实只有一件，会导致超卖，后面课程会用到Redis的锁机制
    7、spring带的CollectionUtils.isEmpty(orderDetailList)，慢慢熟悉。
    8、对于对精度要求较高的字段，不能使用float或者decimal，要使用BigDecimal orderAmount = new BigDecimal(BigInteger.ZERO);
    9、json：List<OrderDetail> orderDetailList = new ArrayList<>();       
            orderDetailList = gson.fromJson(orderForm.getItems(),
                    new TypeToken<List<OrderDetail>>() {
                    }.getType());
        将json转换为对象。需要捕获对象转换异常，（比如当传入的不是json格式的数据）
    10、java Date类处理的返回数是自动返回到毫秒单位的，要处理成返回到秒级别，可以采用//转存Date --> 秒数Long的方法，但是这样太麻烦，还有更简便的方法
		public class Date2LongSerializer  extends JsonSerializer<Date>
		重写serialize方法
		然后就可以在字段上添加注解@JsonSerialize(using = Date2LongSerializer.class)
	11、关于返回给前端的值为空时候的设置
		在类上添加@JsonInclude(JsonInclude.Include.NON_NULL)注解，可以让null字段不返回给前端
		全局配置 jackson:
        default-property-inclusion: non_null
        如果需要返回空字符或者空集合，后台可以设置初始值List<OrderDetail> orderDetailList = new ArrayList<>()







